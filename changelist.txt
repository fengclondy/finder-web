# 2012-xx-xx
1. 第一版开发完成，finder是一个文件管理工具，tail功能支持，但是一直觉的tail功能还不够好。
   具备基本的文件列表，浏览，查看，下载功能。

# 2015-xx-xx
1. 增加图片浏览，音频播放，视频播放，文件上传功能；
2. 增加右键菜单，键盘操作支持。
3. 增加各种弹出窗口支持。在多窗口弹出的情况下，如何管理窗口，如何让多个窗口分别响应自己注册的事件，如何管理窗口的状态、窗口阻塞等，需要一套专门UI层来处理。
   因此finder专门实现了一个UI管理组件widget.js，全新的窗口管理，右键菜单支持，快捷键支持，事件管理，事件转发。
   来源于一个小需求：当有一弹窗并且被阻塞状态下，某个操作又弹出一个窗口，并且也是阻塞状态，那么当其中的一个窗口被关闭的时候，另外的一个窗口仍然要保持阻塞状态。
   一个简单的办法就是每个窗口都有一个阻塞层。widget.js的阻塞层只有一个，自己会维护一个当前阻塞窗口的队列。

# 2016-10-06
1. 增加less功能，重要更新。
2. 重写tail功能，代码结构与less一致。

# 2016-10-10
1. 界面上的一些小问题调整，主要是滚动显示内容的准确性和滚动条实时显示的准确性。
2. 服务端一些小bug修复，某些情况下位置计算的不准，这种问题比较严重，如果显示的数据不准就可能给看日志的人造成误导。
   重新对服务端的代码进行了各种异常测试和边界测试，现在的服务端代码已经很稳定了。

# 2016-10-17
1. 增加用户控制功能，默认开启，默认用户名密码: admin, 1234;
   finder一开始是想把它作为一个独立的组件存在，我自己的应用中也都是集成，而不是让finder本身具备各种功能。例如用户控制，都是其他系统提供拦截，finder只是默默的存在。
   有其他使用者感觉没有用户控制不太安全，因此提供了一个极简的用户控制，用户数据都是存储在本地文件系统。
   这可能存在安全隐患，如果你把finder的应用目录配置在了workspace里面，那么所有登录的人都能去查看finder的用户数据并且篡改，例如下载一个默认的admin.dat并覆盖已经修改过密码的admin.dat。
   总之建议还是自己接入自己的用户控制，不要依赖于finder，finder不打算做这些事情。因为这些需求都可能用到数据库，finder只是一个小工具。

# 2016-10-18
1. 优化dom结构;
2. 界面显示, less功能在拉取新的数据的时候窗口滚动位置错误，数据是准确的，只是显示的位置不准，需要手动滚动一下滚动条，已经修复。重要修复，建议更新。

# 2017-01-07
1. 增加grep功能;
2. 增加新版本检测;
3. 提供更加友好的集成方式，其他应用只需引入finder-web.jar即可完成集成。


